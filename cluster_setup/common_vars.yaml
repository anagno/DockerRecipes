k3s_initialization_parameters: "--disable coredns --disable servicelb --disable traefik --flannel-backend=wireguard-native --etcd-expose-metrics=true --kube-controller-manager-arg=\"bind-address=0.0.0.0\" --kube-proxy-arg=\"metrics-bind-address=0.0.0.0\" --kube-scheduler-arg=\"bind-address=0.0.0.0\" "
# the --disable servicelb is because the integrated load balancer does not allocate also virtual IPs. 
# So I prefer to use metallb
# I prefer to deploy traefik manually to have more control over it. And probably without a load balancer,
# we will also have problems with the proxy deployment.
# K3s is using flannel as CNI.
# Flannel default network is not enrcypted. So the communication between the pods is unencrypted. 
# There are experimental backend that supports [encryption](https://github.com/flannel-io/flannel/blob/master/Documentation/backends.md).
# We can activate it in [k3s](https://rancher.com/docs/k3s/latest/en/installation/network-options/#flannel-options),
# I had problems when I activated the ipsec. The communication between the nodes did not work
# So I am now testing with wireguard
# The last 4 parameters are for exposing the metrics from the cluster
# https://github.com/k3s-io/k3s/issues/3619#issuecomment-993977516
# They are necessary if we want to monitor the services with prometheus

# We disable the coredns from k3s, because it does not provided a way of changing the forwarders 
# We need to set the forwards to `forward . 192.168.179.2 208.67.222.222 208.67.220.220`
# By default kubernetes uses it is internal dns, which is only aware of the internal services.
# During the deployement of a pod we can set the `dnsPolicy`. In my network, I have my internal
# DNS server, which I prefer to be used after the internal resolution of the services. So I will
# update the coredns service to use my nameserver for resolving the external address. For that 
# purpose I will edit the current forwarders
# Signs you need to do this step, is that the containers can not resolve external
# domain names. For example I had that problem with authelia and the setup of the smtp
# I have tried in multiple ways to work around the limitation that k3s is not 
# providing a way of customizing coredns. I have tried to:
# 
# * to create a custom d_custom_coredns.yml file in the manifests folder
# * to specify the --resolv-conf during the initialization of the k3s
# * and even to specify the ndots in the containers.
# 
# In generall I could not make it work, so the only solution was to deploy my own coredns
# One of the downsides to disabling coredns is that the nodeHosts configmap entry won't get 
# updated with host file entries for new nodes, so if you're adding or removing nodes from the 
# cluster you'll need to configure it manually.
# Important issues to follow:
# https://github.com/k3s-io/k3s/issues/1863#issuecomment-638328696
# https://github.com/k3s-io/k3s/pull/4397
# https://github.com/k3s-io/k3s/issues/4087
# Eventually I will have to find a way of removing this limitation, because it is nice to use
# the integrated coredns, and do not have to update the coredns.yaml file when updating the cluster
# and having to updating manually coredns


# # Resources
# * https://www.danielstechblog.io/setting-custom-upstream-nameservers-for-coredns-in-azure-kubernetes-service/
# * https://github.com/coredns/coredns/issues/2087
# * https://github.com/k3s-io/k3s/issues/4087#issuecomment-929374460
# * https://rancher.com/docs/k3s/latest/en/installation/install-options/agent-config/
# * https://github.com/k3s-io/k3s/pull/4397
# * https://github.com/k3s-io/k3s/issues/1797
# * https://github.com/k3s-io/k3s/issues/53
# * https://pracucci.com/kubernetes-dns-resolution-ndots-options-and-why-it-may-affect-application-performances.html
# 
# 
# 
# * https://github.com/k3s-io/k3s/issues/1863#issuecomment-638328696
# # Usefull Commands
# 
# ```bash
# KUBE_EDITOR="nano" kubectl -n kube-system edit configmaps coredns -o yaml
# ```