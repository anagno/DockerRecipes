---
- name: Update node
  hosts: all
  any_errors_fatal: true
  ignore_unreachable: true
  serial: 1
  tasks:
    - name: Drain node from cluster
      kubernetes.core.k8s_drain:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: drain
        name: '{{ inventory_hostname }}'
        delete_options:
          delete_emptydir_data: yes
          ignore_daemonsets: yes
      delegate_to: "{{ groups['masters'][0] }}"
      become: yes
      # https://github.com/ansible-collections/kubernetes.core/issues/474
      when: inventory_hostname not in groups['disks']

    - name: Drain node from cluster 
      shell: kubectl drain {{ inventory_hostname|lower }} --ignore-daemonsets --delete-emptydir-data --force --pod-selector='app!=csi-attacher,app!=csi-provisioner' --kubeconfig /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['masters'][0] }}"
      become: yes
      # https://github.com/ansible-collections/kubernetes.core/issues/474
      when: inventory_hostname in groups['disks']

    - name: Upgrade the OS (apt-get update)
      apt:
        update_cache: yes
        upgrade: dist
      become: yes

    - name: Check if reboot required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Reboot if required from updates
      ansible.builtin.reboot:
        reboot_timeout: 1200
      become: true
      when: reboot_required_file.stat.exists

    - name: Wait for the reboot to complete if updates were made.
      wait_for_connection:
        connect_timeout: 60
        sleep: 20
        delay: 20
        timeout: 300
      when: reboot_required_file.stat.exists

    - name: Check that the disks were re-mounted
      shell: 'lsblk | grep /media/storage'
      when: inventory_hostname in groups['disks']

    - name: Restore node to cluster
      kubernetes.core.k8s_drain:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: uncordon
        name: '{{ inventory_hostname }}'
      delegate_to: "{{ groups['masters'][0] }}"
      become: yes

    - name: Sleep for 600 to wait for longhorn to re-balance
      ansible.builtin.wait_for:
        timeout: 600
      delegate_to: localhost
      when: inventory_hostname in groups['disks']